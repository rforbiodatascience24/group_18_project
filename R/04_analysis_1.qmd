---
title: "04_analysis_1"
format: html
editor: visual
---

# Analysis 1

## Libraries

```{r}
#| silent: true
#| message: false

library("here")
library("DESeq2")
library("fgsea")
library("msigdbr")
library("biomaRt")
library("tidyverse")
library("janitor")

```

# DESEQ analysis

## Data loading

```{r}
# Load raw counts data
female_counts <- read_csv(file = here("data", "02_counts_filtered_female.csv"))
female_metadata <- read_csv(file = here("data", "02_female_metadata.csv"))
```

Now, we need to run some checks both in the metadata and counts data to ensure that we can generate a deseq object correctly. Deseq requires that both the metadata and counts data samples match both in name and order:

```{r}
# collect sample names
counts_samples <- colnames(female_counts)[-1]  
meta_samples <- female_metadata |> 
                pull(external_id)

# find sample names that are in the counts data and in the meta data
overlapping_samples <- intersect(counts_samples, meta_samples)

# select all overlapping samples counts and meta data
counts_checked <- female_counts |> 
                  dplyr::select(c("gene_id", all_of(overlapping_samples)))  
meta_checked <- female_metadata |>
                filter(external_id %in% overlapping_samples)

# create a gene expression matrix
BRCA_counts_matrix <- counts_checked |> 
                      column_to_rownames("gene_id")

ids_to_check<-meta_checked |> pull(external_id)
# check column names in counts match row names in metadata
if (!all(colnames(BRCA_counts_matrix) %in% ids_to_check)) {
  stop("Mismatch between column names in counts matrix and metadata external IDs.")
}

# reorder metadata to match the order of columns in counts matrix
meta_checked <- meta_checked |>
  filter(external_id %in% colnames(BRCA_counts_matrix)) |>
  arrange(match(external_id, colnames(BRCA_counts_matrix)))

# ensure order consistency
if (!all(ids_to_check == colnames(BRCA_counts_matrix))) {
  stop("Column order in counts matrix does not match metadata order.")
}
```

## Building the deseq object

This might take a while..

```{r}
# Prepare the DESeq object
dds <- DESeqDataSetFromMatrix(countData = BRCA_counts_matrix,
                       colData = meta_checked,
                       design = ~ cancer_status)

dds <- DESeq(dds)
# Extract the results
res <- results(dds)
```

```{r}
summary(res)
```

```{r}
res_df <- res |>
          as_tibble(rownames = "gene") |>  
           filter(!is.na(padj)) |> 
          mutate(significant = padj < 0.01) 
```

## Volcano plot

```{r}
# Plot DESeq results
ggplot(res_df, 
       aes(x = log2FoldChange, 
           y = -log10(padj), 
           color = significant)) +
  geom_point(size = 2, alpha = 0.7) + 
  scale_color_manual(values = c("grey", "red")) +
  geom_hline(yintercept = -log10(0.05), linetype = "dashed", color = "blue") +
  geom_vline(xintercept = c(-1, 1), linetype = "dashed", color = "blue") +
  geom_text(data = subset(res_df, padj < 0.01 & abs(log2FoldChange) > 2), 
            aes(label = gene), size = 3, vjust = -0.5) +
  labs(x = "Log2 Fold Change", 
       y = "-Log10 Adjusted P-value", 
       title = "Volcano Plot",
       subtitle = "Differential Gene Expression",
       caption = "Blue dashed lines indicate significance thresholds") + 
  theme_minimal(base_size = 14) 

ggsave(here("results","04_volcano_plot.png"), 
       plot = last_plot(), 
       width = 10, height = 6, dpi = 300,
       bg = "white")
```

```{r}
# save DESeq results in results folder
write_csv(res_df, here("results", "04_deseq_results.csv"))
```

```{r}
#res_df <- read.csv(here("results", "04_deseq_results.csv"))

```

## Genes

```{r}
res_df
```

## Boxplots

It would be nice to check how "different" some of the gene expression values are across the samples as a way to visualize some of the DESEQ reults. To do so, we will select the relevant genes from the counts data and merge it with the metadata. Doing so, we will be able to make a plot to visualize the results.

```{r}
significant_genes <- res_df |> 
  filter(padj < 0.01 & abs(log2FoldChange) > 5) |> 
  pull(gene) 


filtered_female_counts <- counts_checked |> 
  filter(gene_id %in% significant_genes)

```

Lets transpose the data to be able to merge it with the metadata file.

```{r}

filtered_female_counts_t <- filtered_female_counts |> 
  t() |> 
  as.data.frame() |>  row_to_names(row_number = 1) 


filtered_female_counts_t <- filtered_female_counts_t |> 
  rownames_to_column(var = "external_id")

head(filtered_female_counts_t)
```

```{r}


merged_df <- filtered_female_counts_t |> 
            full_join(meta_checked,by="external_id")


merged_df <- merged_df |> 
             mutate(across(all_of(significant_genes), as.numeric)) 


gene_A_plot<-ggplot(merged_df, aes(x = cancer_status, y = ENSG00000206652.1, fill = cancer_status)) +
  geom_boxplot(outlier.shape = NA) +
  theme_minimal() +
  labs(
    title = "Boxplot for gene: ENSG00000206652, by Cancer Status",
    x = "Cancer Status",
    y = "Counts"
  ) +
  coord_cartesian(ylim = c(0, 200))  


ggsave(here("results", paste("04_boxplot_ENSG00000206652.png")), 
       plot = gene_A_plot, 
       width = 10, height = 6, dpi = 300,
       bg = "white")
```

```{r}

gene_B_plot<-ggplot(merged_df, aes(x = cancer_status, y = ENSG00000206585.1, fill = cancer_status)) +
  geom_boxplot(outlier.shape = NA) +
  theme_minimal() +
  labs(
    title = "Boxplot for gene: ENSG00000206585, by Cancer Status",
    x = "Cancer Status",
    y = "Counts"
  ) +
  coord_cartesian(ylim = c(0, 300))  


ggsave(here("results", paste("04_boxplot_ENSG00000206585.png")), 
       plot = gene_B_plot, 
       width = 10, height = 6, dpi = 300,
       bg = "white")
```

## Look for gene sets

```{r}
# generate gene sets
gene_sets <- msigdbr(species = "Homo sapiens", category = "C5", subcategory = "BP")

name = gene_sets |>
  pull(gs_name) |>
  unique()

gene_sets <- gene_sets |>
  group_by(gs_name) |>
  group_map(~ pull(.x, gene_symbol)) |>
  set_names(name)
```

We can see that the gene_sets contain the ensemble gene without the gene version id while our data contains the version. So before proceeding, we should first change the names in our columns:

```{r}

# generate a ranked gene data frame
ranked_genes<- res_df |> 
  dplyr::select(c("gene","stat")) |> 
  filter(!is.na(stat)) 

ranked_genes <- ranked_genes |> 
  separate(gene, 
           into = c("ensembl_gene", "version"), 
           sep = "\\.", remove = TRUE) |> 
  dplyr::select(-version)
```

```{r}

ensembld_ids <- ranked_genes |>
  pull(ensembl_gene)

ensembl <- useEnsembl("ensembl", dataset = "hsapiens_gene_ensembl", mirror = "asia")


gene_mapping <- getBM(attributes = c("ensembl_gene_id", "hgnc_symbol"), 
                      filters = "ensembl_gene_id", 
                      values = ensembld_ids, 
                      mart = ensembl)

ranked_genes_with_symbols <- merge(ranked_genes, gene_mapping,
                                   by.x = "ensembl_gene", 
                                   by.y = "ensembl_gene_id")


hgnc_symbol = ranked_genes_with_symbols |>
  pull(hgnc_symbol)

ranked_genes_named <- ranked_genes_with_symbols |>
  pull(stat) |>
  set_names(hgnc_symbol)
```

```{r}
common_genes <- intersect(names(ranked_genes_named), unlist(gene_sets))
```

## fgsea

```{r}
fgsea_res <- fgsea(pathways = gene_sets,
                   stats = ranked_genes_named)
```

```{r}
head(fgsea_res)
```

```{r}
topPathways <- fgsea_res  |> 
                arrange(padj) |> 
                dplyr::slice(1:10)  

ggplot(topPathways, 
       mapping = aes(x = reorder(pathway, NES), 
                     y = NES, 
                     fill = NES > 0)) +  # Color pathways based on NES direction
  geom_col() +
  coord_flip() +
  scale_fill_manual(values = c("red", "blue"), guide = FALSE) +  # Red for up, blue for down
  labs(x = "Pathway", 
       y = "Normalized Enrichment Score (NES)", 
       title = "Top 10 Enriched Pathways") +
  theme_minimal()

ggsave(here("results", "04_top_10_enriched_pathways.png"), 
       plot = last_plot(), 
       width = 10, height = 6, dpi = 300,
       bg = "white")
```
