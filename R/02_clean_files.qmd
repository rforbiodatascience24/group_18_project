---
title: "02_clean_files"
format: html
editor: visual
---

# Cleaning Data set

From recount3, we have downloaded the files and save them to \_raw folder. Now we will clean the data.

## Libraries

```{r}
#| silent: true
#| message: false

library("here")
library("tidyverse")
```

Now that we have already imported the necessary libraries, we proceed to load the files and tidy them

```{r}
# Load raw data files
normalized_counts <- read_csv(here("_raw", "01_BRCA_tpm_counts.csv"))
counts <- read_csv(here("_raw", "01_BRCA_counts.csv"))
metadata <- read_csv(here("_raw", "01_BRCA_metadata.csv"))
```

```{r}
# Check the dimensions of our loaded data
print(dim(metadata))
print(dim(counts))
```

-   So as we can see from the data loaded, the counts file contains 63856 rows, each representing the normalized counts for each gene and 1257 columns, containing the specific information for each breast cancer patient

-   In the metadata file, we would expect the same number of patients, but in this case as rows. And we can see from importing the file that actually there are 1256 rows and 18 columns

# Clean metadata

```{r}
# Find all columns that only consists of NA values
cols_all_nan <- colnames(metadata)[colSums(is.na(metadata)) == nrow(metadata)]
print(cols_all_nan)
```

For those columns all values are Nan. Also there are some columns that are not relevant, so we can remove all of them:

```{r}
# Remove unnecessary columns from metadata 
columns_to_remove <- c("rail_id",
                       "file_source",
                       "study_name",
                       "year",
                       "vital_status",
                       "packs_smoke",
                       "years_smoke",
                       "bmi")

clean_metadata <- metadata |> 
  dplyr::select(-all_of(columns_to_remove))
```

Our final metadata looks like this:

```{r}
# Show the first entries of our metadata
head(clean_metadata)
```

## Check the values in column cancer status

For our later analysis we want to group our data by their cancer status. To do so we need to remove all entries with Na as cancer status

```{r}
# metadata entries before removel of na as cancer status
print(dim(clean_metadata))

# remove all na cancer status patients
clean_metadata <- clean_metadata |> 
  filter(!is.na(cancer_status))

# metadata entries after na removel
print(dim(clean_metadata))
```

Before we removed patients with unclassified cancer status we had 1256 patients afterwards we have 1102 patients left.

## Check if gender and sex are redundant

It seems like gender and sex have the same value for all patients:

```{r}
# check how often gender and sex have the same value
check_same <- clean_metadata |>
  filter(gender == sex)

# print dimensions
print(dim(check_same))
```

So gender and sex always have the same values and are redundant! So we can remove one of them..

```{r}
# remove of the gender column
clean_metadata <- clean_metadata |> 
  dplyr::select(-all_of("gender"))
```

## Final meta data

After cleaning our downloaded raw meta data we will use the following data set for our analysis:

```{r}
head(clean_metadata)
```

## Exploring data before merging

Lets explore the metadata and genes columns a bit before merging, we might not need everything

```{r}
# Plot the number of male and female patients with breast cancer
plt <- ggplot(data = clean_metadata,
       map = aes(
         x = sex,
         fill = sex)) +
  geom_bar() +
  labs(title = "Number of female and male patients in our dataset") +
  theme_light()

ggsave(
  here("results", "02_male_female_ratio.png"), 
  plot =plt, 
  width = 10, 
  height = 6, 
  dpi = 300,
  bg = "white")
```

To minimize the gender effects in the study, we are separating the patients by sex.

```{r}
female_metada <- clean_metadata |>  
  filter(sex == "female")

male_metadata <- clean_metadata |>
  filter(sex == "male")
```

As we will also use the gene count data, we want to identify the samples of each so we can also filter the gene count data to match the metadata

```{r}
samples_male <- male_metadata |> 
  pull(external_id)
samples_females <- female_metada |> 
  pull(external_id)
```

------------------------------------------------------------------------

# Clean counts data

To reduce the size of our count data frames we decided to remove all genes that have zero variance across all our samples.

```{r}
# Find genes with zero variance
genes_with_zero_variance <- counts |> 
  rowwise() |> 
  mutate(variance = var(c_across(where(is.numeric)))) |>
  ungroup() |> 
  filter(variance == 0) |> 
  pull(gene_id)
```

```{r}
# remove those genes from raw counts and tpm counts
cleaned_counts <- counts |> 
  filter(!gene_id %in% genes_with_zero_variance)

cleaned_tpm_counts <- normalized_counts |> 
  filter(!gene_id %in% genes_with_zero_variance)
```

```{r}
# print the new dimensions of the data frames
print(dim(cleaned_counts))
print(dim(cleaned_tpm_counts))
```

```{r}
# Show an example of the new counts
head(cleaned_counts)
```

## Filtering counts by sex

Next we divide our data into smaller chunks of data by dividing it based on the patients sex.

```{r}
# columns to keep
samples_male <- c(samples_male, "gene_id")
samples_females <- c(samples_females, "gene_id")

# male data
counts_filtered_male <- cleaned_counts |> 
  dplyr::select(all_of(samples_male))

n_counts_filtered_male<-normalized_counts |> 
  dplyr::select(all_of(samples_male))

# female data
counts_filtered_female<-cleaned_counts |> 
  dplyr::select(all_of(samples_females))

n_counts_filtered_female<-normalized_counts |> 
  dplyr::select(all_of(samples_females))
```

## Writing the cleaned and filtered data

After cleaning all the raw data we are saving the new data to the data folder

```{r}
# save metadata
write_csv(male_metadata, here("data", "02_male_metadata.csv"))
write_csv(female_metada, here("data", "02_female_metadata.csv"))

# save raw counts
write_csv(counts_filtered_male, here("data", "02_counts_filtered_male.csv"))
write_csv(counts_filtered_female, here("data", "02_counts_filtered_female.csv"))

# save normalised counts
write_csv(n_counts_filtered_male, here("data", "02_norm_counts_filtered_male.csv"))
write_csv(n_counts_filtered_female, here("data", "02_norm_counts_filtered_female.csv"))
```
