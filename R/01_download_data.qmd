---
title: "01_download_data"
format: html
editor: visual
---

The code in this file is used to download all the data we want to use in our project.

# Load libraries

```{r}
#| echo: false

library("recount3")
library("dplyr")
library("tibble")
library("readr")
library("recount")
```

# About the data

For our project, we decided to work with TCGA BRCA data. For accessing to this data, we found recount3 package that helps to access data. Information about the library can be found [here](https://rna.recount.bio/docs/)

# Retrieving Projects

```{r}
# Get all available projects human
human_projects <- recount3::available_projects("human")

# Select the breast cancer project (BRCA)
proj_name <- "BRCA"

# Select breast cancer projects from all projects
proj_info <- human_projects |>
  filter(project == proj_name, project_type == "data_sources")

# Create a RangedSummarizedExperiment (RSE) object at the gene level
rse_gene_object <- recount3::create_rse(proj_info)
```

# Extracting Metadata

First, we select the metadata entries of interest

```{r}
# Create an object containing all metadata columns we want to gather
meta_data <- tibble(
  rail_id = rse_gene_object@colData@listData[["rail_id"]],
  external_id = rse_gene_object@colData@listData[["external_id"]],
  sex = rse_gene_object@colData@listData[["tcga.gdc_cases.demographic.gender"]],
  file_source = rse_gene_object@colData@listData[["recount_project.file_source"]],
  study_name = rse_gene_object@colData@listData[["study"]],
  country = rse_gene_object@colData@listData[["tcga.cgc_sample_country_of_sample_procurement"]],
  gender = rse_gene_object@colData@listData[["tcga.gdc_cases.demographic.gender"]],
  year = rse_gene_object@colData@listData[["tcga.gdc_cases.demographic.year_of_birth"]],
  ethnicity = rse_gene_object@colData@listData[["tcga.gdc_cases.demographic.ethnicity"]],
  race = rse_gene_object@colData@listData[["tcga.gdc_cases.demographic.race"]],
  vital_status = rse_gene_object@colData@listData[["tcga.gdc_cases.diagnoses.vital_status"]],
  sample_type = rse_gene_object@colData@listData[["tcga.cgc_sample_sample_type"]],
  cancer_status = rse_gene_object@colData@listData[["tcga.xml_person_neoplasm_cancer_status"]],
  histol_type = rse_gene_object@colData@listData[["tcga.xml_histological_type"]],
  packs_smoke = rse_gene_object@colData@listData[["tcga.xml_number_pack_years_smoked"]],
  years_smoke = rse_gene_object@colData@listData[["tcga.gdc_cases.exposures.years_smoked"]],
  age_at_diag = rse_gene_object@colData@listData[["tcga.cgc_case_age_at_diagnosis"]],
  bmi = rse_gene_object@colData@listData[["tcga.gdc_cases.exposures.bmi"]])
```

# Counts data

Then, we select the count data and generate a table with gene expression adn rename raw_counts to counts in order to be able to normalize data afterwards

```{r}

counts <- recount3::compute_read_counts(rse_gene_object) %>%
  as_tibble(rownames = "gene_id")

if (!"counts" %in% assayNames(rse_gene_object)) {
  assays(rse_gene_object)$counts <- assays(rse_gene_object)$raw_counts
  assays(rse_gene_object)$raw_counts <- NULL
}
  
```

# Step 3: Compute TPM

```{r}

tpm_counts <- recount::getTPM(rse_gene_object) %>%
  as_tibble(rownames = "gene_id")

```

# Saving files

Finally, we save the data to our raw folder as csv files

```{r}
write_csv(tpm_counts,"BRCA_tpm_counts.csv")
write_csv(meta_data, "BRCA_metadata.csv")
write_csv(counts, "BRCA_counts.csv")

```
