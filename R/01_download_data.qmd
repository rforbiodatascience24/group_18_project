---
title: "01_download_data"
format: html
editor: visual
---

The code in this file is used to download all the raw data we want to use in our project.

# Load libraries

```{r , message=FALSE}
#| echo: false

library("tidyverse")
library("recount3")
library("recount")
library("here")
```

# About the data

For our project, we decided to work with TCGA BRCA (breast cancer) data. For accessing this data, we use the recount3 package that helps to access TCGA data. Information about the library can be found [here](#0).

# Retrieving Projects

```{r}
# Get all available projects human
human_projects <- recount3::available_projects("human")

# Select the breast cancer project (BRCA)
proj_name <- "BRCA"

# Select breast cancer projects from all projects
proj_info <- human_projects |>
  filter(project == proj_name, project_type == "data_sources")

# Create a RangedSummarizedExperiment (RSE) object at the gene level
rse_gene_object <- recount3::create_rse(proj_info)
```

# Extracting Metadata

First, we select the metadata entries of interest.

```{r}
# Create an object containing all metadata columns we want to gather
meta_data <- tibble(
  rail_id = rse_gene_object@colData@listData[["rail_id"]],
  external_id = rse_gene_object@colData@listData[["external_id"]],
  sex = rse_gene_object@colData@listData[["tcga.gdc_cases.demographic.gender"]],
  file_source = rse_gene_object@colData@listData[["recount_project.file_source"]],
  study_name = rse_gene_object@colData@listData[["study"]],
  country = rse_gene_object@colData@listData[["tcga.cgc_sample_country_of_sample_procurement"]],
  gender = rse_gene_object@colData@listData[["tcga.gdc_cases.demographic.gender"]],
  year = rse_gene_object@colData@listData[["tcga.gdc_cases.demographic.year_of_birth"]],
  ethnicity = rse_gene_object@colData@listData[["tcga.gdc_cases.demographic.ethnicity"]],
  race = rse_gene_object@colData@listData[["tcga.gdc_cases.demographic.race"]],
  vital_status = rse_gene_object@colData@listData[["tcga.gdc_cases.diagnoses.vital_status"]],
  sample_type = rse_gene_object@colData@listData[["tcga.cgc_sample_sample_type"]],
  cancer_status = rse_gene_object@colData@listData[["tcga.xml_person_neoplasm_cancer_status"]],
  histol_type = rse_gene_object@colData@listData[["tcga.xml_histological_type"]],
  packs_smoke = rse_gene_object@colData@listData[["tcga.xml_number_pack_years_smoked"]],
  years_smoke = rse_gene_object@colData@listData[["tcga.gdc_cases.exposures.years_smoked"]],
  age_at_diag = rse_gene_object@colData@listData[["tcga.cgc_case_age_at_diagnosis"]],
  bmi = rse_gene_object@colData@listData[["tcga.gdc_cases.exposures.bmi"]])
```

# Counts data

Then, we select the count data and generate a table containing the gene expression data. We also rename the entry raw_counts to counts in order to be able to normalize the gen expression data afterwards.

If you get an error running the following code block you have to clear your R environment and rerun all the previous code. We are not sure about the reason, but recount has weird behavior sometimes :)

```{r}
# Extract the raw gen expression counts from the selected projects
counts <- recount3::compute_read_counts(rse_gene_object) |>
  as_tibble(rownames = "gene_id")

if (!"counts" %in% assayNames(rse_gene_object)) {
  assays(rse_gene_object)$counts <- assays(rse_gene_object)$raw_counts
  assays(rse_gene_object)$raw_counts <- NULL
}
  
```

# Compute TPM

Next we collect the gen expression data normalized to transcripts per million (TPM). We will need this data for further analysis.

```{r}
# Collect the normalized gen experssion data
tpm_counts <- recount::getTPM(rse_gene_object) |>
  as_tibble(rownames = "gene_id")
```

# Create project folders
```{r}
create_folders <- function(folder_paths) {
  folder_paths %>%
    walk(~ if (!dir.exists(.x)) dir.create(.x, recursive = TRUE))
}

folders <- c("_raw", "data", "results")
create_folders(folders)

```

# Saving files

Finally, we save the collected raw data to our \_raw folder as .csv files.

```{r}
# Save raw files to _raw directory
write_csv(tpm_counts, here("_raw", "01_BRCA_tpm_counts.csv"))
write_csv(meta_data, here("_raw", "01_BRCA_metadata.csv"))
write_csv(counts, here("_raw", "01_BRCA_counts.csv"))
```
